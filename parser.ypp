%{
#include <iostream>
#include <cstdlib>
#include <string>
#include "ast.hpp"
using namespace std;

int yylex();

void yyerror(string s){
    cerr << s << endl;
    exit(EXIT_FAILURE);
}
int brojac = 0;
%}
%union{
    ExprAST *e;
    double d;
    string *s;
    vector<ExprAST*> *v;
    vector<string> *v1;
    PrototypeAST* p;
    vector<pair<string,ExprAST*>> *v2;
    pair<string,ExprAST*> *p1;
}

%type <e> E PozivFje
%type <v> NizArgumenata
%type <v1> NizParametara
%type <p> Potpis
%type <v2> NizDeklaracija
%type <p1> Deklaracija

%token def_token extern_token if_token then_token else_token for_token in_token var_token poredjenje_token
%token <s> id_token
%token <d> num_token

%left ':'
%left then_token
%left else_token in_token
%right '='
%left '|'
%left '<' '>' poredjenje_token
%left '+' '-'
%left '*' '/'
%nonassoc '!'

%%
Program: Program Naredba ';' {
    
    }
    | Naredba ';' {
        
    }
;

Naredba: def_token Potpis E {
        FunctionAST *f = new FunctionAST($2,$3);
        f->codegen();
        delete f;
    }
    | extern_token Potpis {
        $2->codegen();
    }
    | E {
        FunctionAST *f = new FunctionAST(new PrototypeAST("anonimna_fja_"+to_string(brojac++),vector<string>()),$1);
        f->codegen();
        delete f;
    }
;
Potpis: id_token '(' NizParametara ')' {
    $$ = new PrototypeAST(*$1,*$3);
    delete $1;
    delete $3;
}
;

NizParametara: NizParametara id_token {
        $$ = $1;
        $$->push_back(*$2);
        delete $2;
    }
    | {
        $$ = new vector<string>();
    }
;

E: E '+' E {
        $$ = new AddExprAST($1,$3);
    }
    | E '-' E {
        $$ = new SubExprAST($1,$3);
    }
    | E '*' E {
        $$ = new MulExprAST($1,$3);
    }
    | E '/' E {
        $$ = new DivExprAST($1,$3);
    }
    | E '<' E {
        $$ = new LtExprAST($1,$3);
    }
    | E '>' E {
        $$ = new GtExprAST($1,$3);
    }
    | '!' E {
        $$ = new IfExprAST($2,new NumberExprAST(0.0),new NumberExprAST(1.0));
    }
    | E '|' E {
        $$ = new IfExprAST($1,new NumberExprAST(1.0),new IfExprAST($3,new NumberExprAST(1.0),new NumberExprAST(0.0)));
    }
    | E poredjenje_token E {
        $$ = new IfExprAST(new SubExprAST($1,$3),new NumberExprAST(0.0),new NumberExprAST(1.0));
    }
    | E ':' E {
        $$ = new SeqExprAST($1,$3);
    }
    | '(' E ')' {
        $$ = $2;
    }
    | id_token {
        $$ = new VariableExprAST(*$1);
        delete $1;
    }
    | num_token {
        $$ = new NumberExprAST($1);
    }
    | PozivFje {
        $$ = $1;
    } 
    | if_token E then_token E else_token E {
        $$ = new IfExprAST($2,$4,$6);
    }
    | if_token E then_token E {
        $$ = new IfExprAST($2,$4,new NumberExprAST(0.0));
    }
    | for_token id_token '=' E ',' E ',' E in_token E {
        $$ = new ForExprAST(*$2,$4,$6,$8,$10);
        delete $2;
    }
    | for_token id_token '=' E ',' E in_token E {
        $$ = new ForExprAST(*$2,$4,$6,new NumberExprAST(1.0),$8);
        delete $2;
    }
    | id_token '=' E {
        $$ = new AssignExprAST(*$1,$3);
        delete $1;
    }
    | var_token NizDeklaracija in_token E{
        $$ = new VarExprAST(*$2,$4);
        delete $2;
    }
; 

NizDeklaracija : NizDeklaracija ',' Deklaracija {
        $$ = $1;
        $$->push_back(*$3);
        delete($3);
    }
    | Deklaracija {
        $$ = new vector<pair<string,ExprAST*>>();
        $$->push_back(*$1);
        delete($1);
    }
;

Deklaracija: id_token '=' E {
        $$ = new pair<string,ExprAST*>(*$1,$3);
        delete $1;
    }
    |id_token {
        $$ = new pair<string,ExprAST*>(*$1,new NumberExprAST(0.0));
        delete $1;
    }
;    

PozivFje: id_token '(' NizArgumenata ')' {
        $$ = new CallExprAST(*$1,*$3);
        delete $1;
        delete $3;
    }
    | id_token '(' ')' {
        $$ = new CallExprAST(*$1,vector<ExprAST*>());
        delete $1;
    }
;

NizArgumenata: NizArgumenata ',' E {
        $$ = $1;
        $$->push_back($3);
    }
    | E {
        $$ = new vector<ExprAST*>();
        $$->push_back($1);
    }
;

%%

extern LLVMContext TheContext;
extern Module* TheModule;

int main(){
    InitializeModuleAndPassManager();
    yyparse();
    TheModule->print(outs(),nullptr);

    delete TheModule;
    exit(EXIT_SUCCESS);
}
